#!/bin/bash

VERSION="2.0.0"

BLUE="$(tput setaf 4)"
GREEN="$(tput setaf 2)"
RED="$(tput setaf 1)"
YELLOW="$(tput setaf 3)"
CLEAN="$(tput sgr0)"
PURPLE="$(tput setaf 5)"
CYAN="$(tput setaf 6)"

GOENV_DIR="${HOME}/.goenv"

DEFAULT_PYTHON_VERSION="3"
DEFAULT_GOLANG_VERSION="latest"

print_version() {
    echo -e "GoENV version: ${GREEN}${VERSION}${CLEAN}"
}

print_usage() {
    local extended=$1
    echo -e "Description:
    GoENV is project (directory) manager, with Golang and Python support. It is a combination of features from tools like: direnv, gvm, pyenv, etc.
    "
    if [[ ! -z $extended ]]; then
    echo -e "Configuration:
    Script must have access to shell. You need to add line to ~/.bashrc, for example:
        ${YELLOW}alias goenv=\". /path/to/goenv\"${CLEAN}
    You need to set workspace directory (where your projects will be created):
        ${YELLOW}export GOENV_WORKSPACE=~/my_projects${CLEAN}

Prompt:
    Goenv by default will try to update your ${RED}PS1${CLEAN} with prefix, for example: ${YELLOW}(test Go:1.10rc1 Py:3.5.2)${CLEAN}
    You can disable it by adding to your ~/.bashrc:
        ${YELLOW}export GOENV_DISABLE_PS1=\"1\"${CLEAN}
    
    You can use following enviroment variables to build your own goenv prompt:
        ${YELLOW}\$GOENV_PROJECT         project name${CLEAN}
        ${YELLOW}\$GOENV_GO_VERSION      golang version (if used in project)${CLEAN}
        ${YELLOW}\$GOENV_PYTHON_VERSION  python version (if used in project)${CLEAN}
    
    Example fragment set_prompt function (used with PROMPT_COMMAND):
        ${YELLOW}set_prompt(){
            PS1=\"\"
            if [[ ! -z \"\$GOENV_PROJECT\" ]]; then
                PS1+=\"(\$GOENV_PROJECT\"
                if [[ ! -z \"\$GOENV_GO_VERSION\" ]]; then
                    PS1+=\" Go:\$GOENV_GO_VERSION\"
                fi
                if [[ ! -z \"\$GOENV_PYTHON_VERSION\" ]]; then
                    PS1+=\" Py:\$GOENV_PYTHON_VERSION\"
                fi
                PS1+=\") \"
            fi
            PS1+=\"(\\d \\\t) (\\u@\\h:\\w) \"
        }
        PROMPT_COMMAND='set_prompt'${CLEAN}
    "
    fi

# TODO in init command:  
# ${GREEN}--run_script[=path/to/file]${CLEAN}  path to script, which is run after enter project (for example: --run_script=\"start_ipython.sh\")
# ${GREEN}--exit_script[=path/to/file]${CLEAN} path to script, which is run after leaving project (for example: --exit_script=\"tools/container_stop.sh\")

echo -e "Commands:
    ${YELLOW}create [project_name] {params}${CLEAN} create new project and (optional) init lang support:
                                    ${GREEN}--golang[=version]${CLEAN}  fetch/use go (${PURPLE}default: latest stable${CLEAN})
                                    ${GREEN}--python[=version]${CLEAN}  create virtualenv with specific python version (${PURPLE}default: 3${CLEAN})
                                    ${GREEN}--force${CLEAN}             for recreate existing python virtualenv

    ${YELLOW}use [project_name]${CLEAN}             activate project (activate virtualenv and/or set environment variables)

    ${YELLOW}set {options}${CLEAN}                  set various settings for project:
                                    ${GREEN}--directory[=relative/path/to/dir]${CLEAN}  default directory to enter after activation (empty to clear) 
                                        example: --directory=\"src/github.com/mieczkowski/goenv\")

    ${YELLOW}init {init_params}${CLEAN}             add lang support in project, or change version (${YELLOW}params${CLEAN} from ${YELLOW}create${CLEAN} command)
    ${YELLOW}exit${CLEAN}                           deactivate project

    ${YELLOW}ls${CLEAN}                             list projects
    ${YELLOW}rename [source] [destination]${CLEAN}  rename project
    ${YELLOW}rm [project_name]${CLEAN}              deactivate project and remove it

    ${YELLOW}golang${CLEAN}                         tools for golang (list available Go versions, install common software)
                                    ${GREEN}list${CLEAN}          list available golang versions (can be used with ${YELLOW}--golang${CLEAN} in ${YELLOW}create/init${CLEAN} command)
                                    ${GREEN}init [param]${CLEAN}  clone/fetch repository and put it to right directory. Param can be in one of three formats:
                                        ${CYAN}https://github.com/mieczkowski/goenv.git${CLEAN} - git clone with http
                                        ${CYAN}git@github.com:mieczkowski/goenv.git${CLEAN}     - git clone with ssh
                                        ${CYAN}mieczkowski/goenv${CLEAN}                        - clone from github (http by default, --ssh to force ssh)
                                    

    ${YELLOW}version${CLEAN}                        print the goenv version number
    ${YELLOW}help${CLEAN}                           print ${PURPLE}extended help${CLEAN} help"
}

###################### UTILS

golang_download_version() {
    local version=$1
    local url="https://golang.org/dl/go${version}.linux-amd64.tar.gz"

    # if version already fetched - nothing to do...
    if [[ -d $GOENV_DIR/go/$version && -f $GOENV_DIR/go/$version/bin/go ]]; then
        return 0
    fi

    if [[ -z $version ]]; then
        echo -e "${RED}Empty golang version!${CLEAN}"
        return 1
    fi

    local archiveName="go-${version}.tar.gz"
    if [[ ! -f $GOENV_DIR/tmp/$archiveName ]]; then
        echo "Downloading golang (${version}) ..."
        wget $url -O /tmp/$archiveName -c --no-check-certificate
		if [ $? != 0 ]; then
			echo -e "${RED}Can not download ${url} to ${archiveName}!${CLEAN}"
			return 1
		fi
         mkdir -p $GOENV_DIR/tmp
        if [[ $? != 0 ]]; then 
            echo -e "${RED}Can not create directory for tmp files: $GOENV_DIR/tmp${CLEAN}"
            return 1
        fi
        mv /tmp/$archiveName $GOENV_DIR/tmp/$archiveName
        if [ $? != 0 ]; then
			echo -e "${RED}Can not move file /tmp/$archiveName to $GOENV_DIR/tmp/$archiveName!${CLEAN}"
			return 1
		fi
    fi

    mkdir -p $GOENV_DIR/go/$version
    if [[ $? != 0 ]]; then 
        echo -e "${RED}Can not create directory for golang: $GOENV_DIR/go/$version${CLEAN}"
        return 1
    fi

    echo "Unpacking archive to ${GOENV_DIR}/go/${version} ..."
   
    tar zxf $GOENV_DIR/tmp/$archiveName --strip=1 -C ${GOENV_DIR}/go/${version}
    if [ $? != 0 ]; then
        echo -e "${RED}Can not extract ${url} to ${archiveName}!${CLEAN}"
        return 1
    fi
}

golang_get_latest_version() {
    local golang_latest=`curl -s https://golang.org/dl/ | grep 'download.*downloadBox' | grep -o 'https.*linux.*gz' | perl -pe '($_)=/([0-9]+([.][0-9]+)+)/'`
    if [[ -z $golang_latest ]]; then 
        echo -e "${RED}Can not fetch latest go version!${CLEAN}"
        return 1
    fi
    echo $golang_latest
}

###################### COMMANDS HANDLERS

command_init() {
    local project_name="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    shift
    local golang_enable=""
    local golang_version=""
    local python_enable=""
    local python_version=""
    local force=""
    for param in "$@"; do
        case $param in
            --golang=*|"--golang")
                golang_enable="1"
                golang_version="${param#*=}"
                [[ $golang_version == $param || -z $golang_version ]] && golang_version=$DEFAULT_GOLANG_VERSION
                ;;
            --python=*|"--python")
                python_enable="1"
                python_version="${param#*=}"
                [[ $python_version == $param || -z $python_version ]] && python_version=$DEFAULT_PYTHON_VERSION
                if [[ $python_version != "2" && $python_version != "3" ]]; then
                    echo -e "${RED}Python version must be 2 or 3!${CLEAN}"
                    return 1
                fi
                ;;
            "--force")
                force="1"
                ;;
        esac
    done

    if [[ $golang_enable == "1" ]]; then
        if [[ $golang_version == "latest" ]]; then
            golang_version=`golang_get_latest_version`
            if [[ $? != 0 ]]; then 
                return 1
            fi
        fi

        if ! golang_download_version $golang_version; then 
            return 1
        fi

        if [[ ! -d $GOENV_WORKSPACE/$project_name/.goenv ]]; then
            if ! mkdir -p $GOENV_WORKSPACE/$project_name/.goenv; then
                echo -e "${RED}Can not create $GOENV_WORKSPACE/$project_name/.goenv directory!${CLEAN}"
                return 1
            fi
        fi

        if ! echo "$golang_version" > $GOENV_WORKSPACE/$project_name/.goenv/golang.version; then 
            echo -e "${RED}Can not create write Go version to $GOENV_WORKSPACE/$project_name/.goenv/golang.version file!${CLEAN}"
            return 1
        fi
    fi

    if [[ $python_enable == "1" ]]; then
        if [[ ! -d $GOENV_WORKSPACE/$project_name/.goenv ]]; then
            if ! mkdir -p $GOENV_WORKSPACE/$project_name/.goenv; then
                echo -e "${RED}Can not create $GOENV_WORKSPACE/$project_name/.goenv directory!${CLEAN}"
                return 1
            fi
        fi
        if ! command -v virtualenv >/dev/null 2>&1; then
            echo -e "${RED}Virtualenv not found!${CLEAN}"
            echo -e "Install virtualenv (${YELLOW}apt-get install virtualenv${CLEAN}) and init python in activated project: ${YELLOW}goenv init --python${CLEAN}"
            return 1
        fi
        local python_bin="python${python_version}"
        if ! command -v $python_bin >/dev/null 2>&1; then
            echo -e "${RED}$python_bin not found!${CLEAN}"
            echo -e "Install $python_bin (${YELLOW}apt-get install $python_bin${CLEAN}) and init python in activated project: ${YELLOW}goenv init --python=$python_version${CLEAN}"
            return 1
        fi

        if [[ -d $GOENV_WORKSPACE/$project_name/.goenv/pythonenv ]]; then
            # if --force is set -> clear virtualenv and recreate it, otherwise return error
            if [[ $force == "1" ]]; then
                if ! rm -Rf $GOENV_WORKSPACE/$project_name/.goenv/pythonenv; then
                    echo -e "${RED}Can not remove $GOENV_WORKSPACE/$project_name/.goenv/pythonenv directory!${CLEAN}"
                    return 1
                fi
            else
                echo -e "${RED}Vitualenv exists. Use ${YELLOW}--force${CLEAN} to recreate it!${CLEAN}"
                return 1
            fi
        fi

        if ! virtualenv --python=${python_bin} $GOENV_WORKSPACE/$project_name/.goenv/pythonenv; then
            echo -e "${RED}Error while creating virtualenv!${CLEAN}"
            return 1
        fi
    fi
    
    # activate project
    command_use $project_name
    if [[ $? != 0 ]]; then 
        return 1
    fi
}

backup_environment() {
	if [[ -z "$GOENV_BACKUP_PWD" ]]; then
		export GOENV_BACKUP_PWD=`pwd`
	fi

    if [[ -z "$GOENV_BACKUP_GOBIN" ]]; then
		export GOENV_BACKUP_GOBIN=$GOBIN
	fi

	if [[ -z "$GOENV_BACKUP_GOROOT" ]]; then
		export GOENV_BACKUP_GOROOT=$GOROOT
	fi

	if [[ -z "$GOENV_BACKUP_GOPATH" ]]; then
		export GOENV_BACKUP_GOPATH=$GOPATH
	fi

	if [[ -z "$GOENV_BACKUP_PATH" ]]; then
		export GOENV_BACKUP_PATH=$PATH
	fi

    if [[ -z "$GOENV_BACKUP_VIRTUAL_ENV_DISABLE_PROMPT" ]]; then
		export GOENV_BACKUP_VIRTUAL_ENV_DISABLE_PROMPT=$VIRTUAL_ENV_DISABLE_PROMPT
	fi

    if [[ -z $GOENV_DISABLE_PS1 ]]; then
        if [[ -z "$GOENV_BACKUP_PS1" ]]; then
            export GOENV_BACKUP_PS1=$PS1
        fi
    fi
}

restore_environment() {
    if [[ -z $GOENV_PROJECT ]]; then
        return
    fi
    # if we are at active virtualenv - deactivate it
    if [[ ! -z $GOENV_PYTHON_VERSION ]]; then
        if ! deactivate; then
            echo -e "${YELLOW}Deactivate virtualenv error!${CLEAN}"
        fi
        unset GOENV_PYTHON_VERSION
    fi

	if [[ ! -z "$GOENV_BACKUP_GOROOT" ]]; then
		export GOROOT=$GOENV_BACKUP_GOROOT
		unset GOENV_BACKUP_GOROOT
	fi

    if [[ ! -z "$GOENV_BACKUP_GOBIN" ]]; then
		export GOBIN=$GOENV_BACKUP_GOBIN
		unset GOENV_BACKUP_GOBIN
	fi

	if [[ ! -z "$GOENV_BACKUP_GOPATH" ]]; then
		export GOPATH=$GOENV_BACKUP_GOPATH
		unset GOENV_BACKUP_GOPATH
	fi

	if [[ ! -z "$GOENV_BACKUP_PATH" ]]; then
		export PATH=$GOENV_BACKUP_PATH
		unset GOENV_BACKUP_PATH
	fi

    if [[ ! -z "$GOENV_BACKUP_VIRTUAL_ENV_DISABLE_PROMPT" ]]; then
		export VIRTUAL_ENV_DISABLE_PROMPT=$GOENV_BACKUP_VIRTUAL_ENV_DISABLE_PROMPT
		unset GOENV_BACKUP_VIRTUAL_ENV_DISABLE_PROMPT
	fi

	if [[ ! -z "$GOENV_BACKUP_PWD" ]]; then
		cd $GOENV_BACKUP_PWD
		unset GOENV_BACKUP_PWD
	fi

    if [[ -z $GOENV_DISABLE_PS1 ]]; then
        if [[ ! -z "$GOENV_BACKUP_PS1" ]]; then
            export PS1=$GOENV_BACKUP_PS1
            unset GOENV_BACKUP_PS1
        fi
    fi

	unset GOENV_PROJECT
    unset GOENV_GO_VERSION
    unset GOENV_PYTHON_ENV
    unset GOENV_PYTHON_VERSION
}

command_use() {
    local project_name="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    shift
    # TODO: extra parameters from init? for example: temporary different go version?
    if [[ -z $project_name ]]; then 
        echo -e "${RED}Empty project name!${CLEAN}"
        return 1
    fi

    if [[ ! -d "$GOENV_WORKSPACE/$project_name" ]]; then 
        echo -e "${RED}Project $project_name not exists!${CLEAN}"
        return 1
    fi

    restore_environment
    backup_environment

    export GOENV_PROJECT="$project_name"

    migrate_project_to_2 $project_name

    # if golang file exists in .goenv - activate it
    if [[ -d ${GOENV_WORKSPACE}/${project_name}/.goenv && -f ${GOENV_WORKSPACE}/${project_name}/.goenv/golang.version ]]; then
        local golang_version=`cat ${GOENV_WORKSPACE}/${project_name}/.goenv/golang.version | tr -d ' ' | tr -d '\n'`
        # TODO: if latest -> check (with duration, for example 1 hour) for new version
        if ! golang_download_version $golang_version; then
            return 1
        fi
        export GOROOT="${GOENV_DIR}/go/${golang_version}"
	    export GOPATH="${GOENV_WORKSPACE}/${project_name}"
        export PATH="${GOROOT}/bin:${GOENV_WORKSPACE}/${project_name}/bin:${GOENV_BACKUP_PATH}"
        export GOBIN="${GOENV_WORKSPACE}/${project_name}/bin"
        export GOENV_GO_VERSION="${golang_version}"
    fi

    if [[ -d $GOENV_WORKSPACE/$project_name/.goenv/pythonenv ]]; then
        # exception: if VIRTUAL_ENV exists and GOENV_PYTHON_ENV is not set (someone activated external virtualenv) - do not activate
        if [[ ! -z $VIRTUAL_ENV && -z $GOENV_PYTHON_VERSION ]]; then
            echo -e "${YELLOW}External virtualenv activated - I'm using it! ${GREEN}$VIRTUAL_ENV${CLEAN}"
        else
            export VIRTUAL_ENV_DISABLE_PROMPT=1
            if ! source $GOENV_WORKSPACE/$project_name/.goenv/pythonenv/bin/activate; then
                echo -e "${RED}Can not activate virtualenv for Python!${CLEAN}"
                return 1
            fi
            export GOENV_PYTHON_VERSION=`$GOENV_WORKSPACE/$project_name/.goenv/pythonenv/bin/python --version | perl -pe '($_)=/([0-9]+([.][0-9]+)+)/'`
        fi
    fi
    
    local enter_dir=${GOENV_WORKSPACE}/${project_name}
    if [[ -f ${GOENV_WORKSPACE}/${project_name}/.goenv/directory.default ]]; then
        local enter_dir_overwrite=`cat ${GOENV_WORKSPACE}/${project_name}/.goenv/directory.default | tr -d ' ' | tr -d '\n'`
        if [[ ! -z $enter_dir_overwrite && -d "${GOENV_WORKSPACE}/${project_name}/$enter_dir_overwrite" ]]; then
            enter_dir="${GOENV_WORKSPACE}/${project_name}/$enter_dir_overwrite"
        fi
    fi
    cd "${enter_dir}"
	if [ $? != 0 ]; then
		echo -e "${RED}Can not enter ${enter_dir}${CLEAN}"
		return
	fi

    if [[ -z $GOENV_DISABLE_PS1 ]]; then
        local prompt="($GOENV_PROJECT"
        if [[ ! -z "$GOENV_GO_VERSION" ]]; then
            prompt+=" Go:$GOENV_GO_VERSION"
        fi
        if [[ ! -z "$GOENV_PYTHON_VERSION" ]]; then
            prompt+=" Py:$GOENV_PYTHON_VERSION"
        fi
        prompt+=")"
        export PS1="$prompt $GOENV_BACKUP_PS1"
    fi
}

command_remove() {
    local project_name="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    if [[ -z ${project_name} ]]; then 
        echo -e "${RED}Empty project name!${CLEAN}"
        return 1
    fi
    if [[ ! -d "${GOENV_WORKSPACE}/${project_name}" ]]; then 
        echo -e "${RED}Source project ${project_name} not exists!${CLEAN}"
        return 1
    fi

    read -r -p "Are you sure? [y/N] " response
    case "$response" in
        [yY][eE][sS]|[yY])
            if [[ $GOENV_PROJECT == $project_name ]]; then 
                restore_environment
            fi
            
            if ! rm -Rf "${GOENV_WORKSPACE}/${project_name}"; then
                echo -e "${RED}Nie mozna usunac \"$GOENV_WORKSPACE/$1\" !${CLEAN}"
                return
            fi
            echo -e "${GREEN}Project ${project_name} removed${CLEAN}"
            ;;
    esac
}

command_rename() {
    local project_source="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    local project_destination="$(echo $2 | tr '[:upper:]' '[:lower:]')"
    if [[ -z ${project_source} || -z ${project_destination} ]]; then 
        echo -e "${RED}Empty project source or destination!${CLEAN}"
        return 1
    fi
    if [[ ! -d "${GOENV_WORKSPACE}/${project_source}" ]]; then 
        echo -e "${RED}Source project ${project_source} not exists!${CLEAN}"
        return 1
    fi
    if [[ -d "${GOENV_WORKSPACE}/${project_destination}" ]]; then 
        echo -e "${RED}Destination project ${project_destination} already exists!${CLEAN}"
        return 1
    fi
    mv ${GOENV_WORKSPACE}/${project_source} ${GOENV_WORKSPACE}/${project_destination}
	if [ $? != 0 ]; then
		echo -e "${RED}Rename project ${project_source} -> ${project_destination} failed${CLEAN}"
		return 1
	fi
    if [[ $GOENV_PROJECT == ${project_source} ]]; then
        # activate project
        command_use $project_destination
        if [[ $? != 0 ]]; then 
            echo -e "${RED}Error while entering to ${project_destination}${CLEAN}"
            return 1
        fi
    fi
}

command_create() {
    local project_name="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    shift
    if [[ -z $project_name ]]; then 
        echo -e "${RED}Empty project name!${CLEAN}"
        return 1
    fi

    # create dir for project
    if [[ -d "$GOENV_WORKSPACE/$project_name" ]]; then 
        echo -e "${RED}Project $project_name already exists!${CLEAN}"
        return 1
    fi
    
    if ! mkdir -p "$GOENV_WORKSPACE/$project_name"; then 
        echo -e "${RED}Can not create directory: $GOENV_WORKSPACE/$project_name${CLEAN}"
        return 1
    fi

    echo -e "Directory $GOENV_WORKSPACE/$project_name created"

    # init project
    command_init $project_name $@
    if [[ $? != 0 ]]; then 
        return 1
    fi
}

GOLANG_LATEST_VERSION=""

migrate_project_to_2() {
    local project_name="$(echo $1 | tr '[:upper:]' '[:lower:]')"
    # migration from old goenv: .project_name: github.com/a/b
    # if .golang file not exists -> use latest
    if [[ -f ${GOENV_WORKSPACE}/${project_name}/.project_name && ! -f ${GOENV_WORKSPACE}/${project_name}/.goenv/directory.default ]]; then
		local dir_path=`cat ${GOENV_WORKSPACE}/${project_name}/.project_name | tr -d ' ' | tr -d '\n'`
        if [[ ! -z $dir_path && -d "${GOENV_WORKSPACE}/${project_name}/src/${dir_path}" ]]; then
            if [[ ! -d ${GOENV_WORKSPACE}/${project_name}/.goenv ]]; then
                if ! mkdir ${GOENV_WORKSPACE}/${project_name}/.goenv; then
                    echo -e "${RED}Can not create ${GOENV_WORKSPACE}/${project_name}/.goenv directory!${CLEAN}"
                    return 1
                fi
            fi
            if ! echo "src/${dir_path}" > ${GOENV_WORKSPACE}/${project_name}/.goenv/directory.default; then
                echo -e "${RED}Can not save new default directory to ${GOENV_WORKSPACE}/${project_name}/.goenv/directory.default!${CLEAN}"
                return 1
            fi
            if [[ -z $GOLANG_LATEST_VERSION ]]; then
                GOLANG_LATEST_VERSION=`golang_get_latest_version`
                if [[ $? != 0 ]]; then 
                    return 1
                fi
                if ! echo "$GOLANG_LATEST_VERSION" > $GOENV_WORKSPACE/$project_name/.goenv/golang.version; then 
                    echo -e "${YELLOW}Can not create write Go version to $GOENV_WORKSPACE/$project_name/.goenv/golang.version file!${CLEAN}"
                fi
            fi
        fi
        if ! rm ${GOENV_WORKSPACE}/${project_name}/.project_name; then
            echo -e "${RED}Can not remove old file: ${GOENV_WORKSPACE}/${project_name}/.project_name!${CLEAN}"
            return 1
        fi
    fi
}

command_list() {
    echo -e "${BLUE}Project list:${CLEAN}"
    local project_list=`ls --color=never --time-style="long-iso" -l ${GOENV_WORKSPACE} | egrep '^d' | awk '{print \$8}' | sed 's/\/$//'`
    local max_length=1
	for project_name in $project_list; do
        # echo "$project_name has ${#project_name} len"
        [ ${#project_name} -gt ${max_length} ] && max_length=${#project_name}
    done
    # echo "max = $max_length"
	for project_name in $project_list; do
        migrate_project_to_2 $project_name
        local info=""
        if [[ -d $GOENV_WORKSPACE/${project_name}/.goenv ]]; then
            local elements=()
            # get golang version
            if [[ -f $GOENV_WORKSPACE/${project_name}/.goenv/golang.version ]]; then
                elements=("${elements[@]}" "Go: ${YELLOW}`cat $GOENV_WORKSPACE/${project_name}/.goenv/golang.version | tr -d ' ' | tr -d '\n'`${CLEAN}")
            fi

            #get python version
            if [[ -f $GOENV_WORKSPACE/${project_name}/.goenv/pythonenv/bin/python ]]; then
                elements=("${elements[@]}" "Python: ${YELLOW}`$GOENV_WORKSPACE/${project_name}/.goenv/pythonenv/bin/python --version | perl -pe '($_)=/([0-9]+([.][0-9]+)+)/'`${CLEAN}")
            fi

            # get default directory
            if [[ -f $GOENV_WORKSPACE/${project_name}/.goenv/directory.default ]]; then
                local directory=`cat $GOENV_WORKSPACE/${project_name}/.goenv/directory.default | tr -d ' ' | tr -d '\n'`
                directory=${directory#"src/"}
                elements=("${elements[@]}" "Dir: ${YELLOW}$directory${CLEAN}")
            fi
            
            info=${elements[@]}
            if [[ ! -z $info ]]; then
                local project_name_len=${#project_name}
                local spaces_num=$((max_length-project_name_len+1))
                local spaces=""
                for i in $(seq 1 $spaces_num); do spaces+=' '; done
                info="${spaces}(${info})"
            fi
        fi
		echo -e "    ${GREEN}${project_name}${CLEAN}${info}"
	done
}

command_golang_list() {
    # listing of available versions of Go
    local versions=$(git ls-remote -t https://go.googlesource.com/go | awk -F/ '{ print $NF }' | grep -v weekly | grep -v release | sort --version-sort | tail -n 50)
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}Failed to get version list${CLEAN}"
        return 1
    fi
    local golang_latest_version=`golang_get_latest_version`
    if [[ $? != 0 ]]; then 
        echo -e "${RED}Failed to get latest version${CLEAN}"
        return 1
    fi
    local project_version=""
    if [[ ! -z $GOENV_PROJECT ]]; then
        if [[ -f $GOENV_WORKSPACE/${GOENV_PROJECT}/.goenv/golang.version ]]; then
            project_version=`cat $GOENV_WORKSPACE/${GOENV_PROJECT}/.goenv/golang.version | tr -d ' ' | tr -d '\n'`
        fi
    fi
    for version in $versions; do
        local elements=()
        if [[ $version == "go${golang_latest_version}" ]]; then
            elements=("${elements[@]}" "[${GREEN}LATEST STABLE${CLEAN}]")
        fi
        if [[ $version == "go${project_version}" ]]; then
            elements=("${elements[@]}" "[${RED}USED${CLEAN}]")
        fi
        
        local info=${elements[@]}
        echo -e "${YELLOW}$version${CLEAN}\t\t$info"
    done
    return
}

command_golang_init() {
    local url=""
    local path=""
    local char="/"
    local input_url=$1
    shift
    if [[ ${input_url} == "https://github.com"* ]]; then
        url=${input_url}
        path=`echo ${input_url} | sed -e "s/^https:\/\///" -e "s/\.git$//"`
        echo "URL! ${url} ${path}"
    elif [[ ${input_url} == "git@github.com:"* ]];then
        url=${input_url}
        path=`echo ${input_url} | sed -e "s/^git@//" -e "s/\.git$//"`
        path=${path/://}
        echo "SSH! ${url} ${path}"
    elif [[ `echo "${input_url}" | awk -F"${char}" '{print NF-1}'` == "1" ]]; then
        if [[ $1 == "--ssh" ]]; then
            url="git@github.com:${input_url}.git"
        else
            url="https://github.com/${input_url}.git"
        fi
        path="github.com/${input_url}"
    else
        echo -e "${RED}Invalid input!${CLEAN}"
        return 1
    fi

    echo "git clone ${url} src/${path}"
    if git clone ${url} ${GOENV_WORKSPACE}/${GOENV_PROJECT}/src/${path}; then
        if ! echo "src/${path}" > ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv/directory.default; then
            echo -e "${RED}Failed to set default directory${CLEAN}"
            return 1
        fi
    else
        echo -e "${RED}Failed to clone repository${CLEAN}"
        return 1
    fi
}

command_golang() {
    case "$1" in
		"list")
			command_golang_list
			;;
        "init")
            if [[ ! -z $GOENV_PROJECT ]]; then
            shift
                command_golang_init $@
            else
                echo -e "${RED}You must be in active project with !${CLEAN}"
            fi
            ;;
		"commands")
			echo "list init"
			;;
		*)
			print_usage
			;;
	esac
}

command_set() {
    for param in "$@"; do
        case $param in
            --directory=*|--dir=*)
                local directory="${param#*=}"
                if [[ -z $directory ]]; then
                    # remove default directory
                    if [[ -f ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv/directory.default ]]; then
                        if ! rm ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv/directory.default; then
                            echo -e "${RED}Failed to remove ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv/directory.default${CLEAN}"
                            return 1
                        fi
                        echo "${GREEN}Default directory cleared${CLEAN}"
                    fi
                else
                    link=`readlink -e ${GOENV_WORKSPACE}/${GOENV_PROJECT}/${directory}`
                    if [[ ! -d `readlink -e ${GOENV_WORKSPACE}/${GOENV_PROJECT}/${directory}` ]]; then
                        echo -e "${RED}Directory does not exists!${CLEAN}"
                        return 1
                    fi
                    if [[ ! -d ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv ]]; then
                        if ! mkdir ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv; then
                            echo -e "${RED}Failed to create ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv directory${CLEAN}"
                            return 1
                        fi
                    fi
                    if ! echo "${directory}" > ${GOENV_WORKSPACE}/${GOENV_PROJECT}/.goenv/directory.default; then
                        echo -e "${RED}Failed to set default directory${CLEAN}"
                        return 1
                    fi
                    echo "${GREEN}New default directory added${CLEAN}"
                fi
                ;;
            *)
                echo "${RED}Unknown command or missing parameter${CLEAN}"
                ;;
        esac
    done
}

if [[ $0 == "$BASH_SOURCE" ]]; then
    echo -e "${RED}Script is running without access to shell!${CLEAN}"
    echo -e "Add to your ~/.bashrc line:"
    echo -e "${YELLOW}alias goenv='. /path/to/goenv'${CLEAN}"
    if [[ $1 == "help" ]]; then
        echo -e ""
        print_usage "1"
    else
        echo -e ""
        echo -e "Type ${RED}help${CLEAN} command to more information"
    fi
else
    if [[ -z "$GOENV_WORKSPACE" ]]; then
        echo -e "${RED}Environment variable GOENV_WORKSPACE is not set. Please add the following line to your .bashrc:${CLEAN}"
        echo -e "export GOENV_WORKSPACE=~/my_workspace"
    else
        command=$1
        shift
        case "$command" in
            "help")
                print_usage "1"
                ;;
            "ls" | "list")
                command_list
                ;;
            "create")
                command_create $@
                ;;
            "rename")
                command_rename $@
                ;;
            "rm" | "remove")
                command_remove $@
                ;;
            "use")
                command_use $@
                ;;
            "exit")
                restore_environment
                ;;
            "init")
                if [[ ! -z $GOENV_PROJECT ]]; then
                    command_init $GOENV_PROJECT $@
                else
                    echo -e "${RED}You must be in active project!${CLEAN}"
                fi
                ;;
            "set")
                if [[ ! -z $GOENV_PROJECT ]]; then
                    command_set $@
                else
                    echo -e "${RED}You must be in active project!${CLEAN}"
                fi
                ;;
            "golang")
                command_golang $@
                ;;
            "envs")
                echo `ls $GOENV_WORKSPACE`
                ;;
            "commands")
                echo "help ls list create rename rm remove use exit init set golang"
                ;;
            *)
                print_usage
                ;;
        esac
    fi
fi
